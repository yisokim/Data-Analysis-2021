{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "private_outputs": true,
      "provenance": [],
      "authorship_tag": "ABX9TyNHHgY8HSGWeAqvb6/Jy70D",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/yisokim/Data-Analysis-2021/blob/main/Untitled0.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eBn8lW_yJnTs"
      },
      "source": [
        "# 피마 인디언 당뇨병"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6eyXHdrPJacD"
      },
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()\n",
        "filename = list(uploaded.keys())[0]"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0-r3uYXcKQHE"
      },
      "source": [
        "import numpy as np\n",
        "import tensorflow as tf\n",
        "seed = 2021\n",
        "np.random.seed(seed)\n",
        "tf.random.set_seed(seed)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "mQgEH8KpN2lE"
      },
      "source": [
        "import pandas as pd\n",
        "df = pd.read_csv(filename, header=None)\n",
        "df.head()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "-IBcv3KzOA3-"
      },
      "source": [
        "df.isnull().sum().sum()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3hbl-ZbzK3Cc"
      },
      "source": [
        "### 데이터 전처리 및 트레인/태스트 분할"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "lQ_xr_TkK7c2"
      },
      "source": [
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from sklearn.model_selection import train_test_split"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "znJ5T3udLKU1"
      },
      "source": [
        "scaler = MinMaxScaler()\n",
        "X_scaled = scaler.fit_transform(df.iloc[:,:-1].values)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "seh-GRdsLfdp"
      },
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(\n",
        "    df.iloc[:,:-1].values, df.iloc[:,-1].values,\n",
        "    stratify=df.iloc[:,-1].values, random_state=seed\n",
        ")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CfOhn6buMC7d"
      },
      "source": [
        "### 모델 정의/설정/학습 평가"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qe8wPDbuMGbB"
      },
      "source": [
        "from tensorflow import keras\n",
        "from tensorflow.keras.models import Sequential\n",
        "#층을 담는 그릇(Sequential은 keras에 포함되어 있는데\n",
        "# 딥러닝 모델을 한층 한층 쌓기 쉽게 해주는 함수)\n",
        "from tensorflow.keras.layers import Dense\n",
        "#층을 만드는 것(각 층이 가질 특성을 각각 다르게 지정 가능)  "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gSzM6_rdPWaj"
      },
      "source": [
        "model = Sequential()   # 2, 4,, 8, 16, 32, 64, 128, 256, 512, 1024 2진법 구조로 생각\n",
        "model.add(Dense(12, input_dim=8, activation = 'relu'))  #0부터 7까지였으니 8개 인풋 #히든 레이어\n",
        "model.add(Dense(8, activation = 'relu'))   #히든레이어 \n",
        "model.add(Dense(1, activation = 'sigmoid')) #이진분류 #아웃풋레이어\n",
        "model.summary()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Zkz0jC2zPcPA"
      },
      "source": [
        "# 환경 설정\n",
        "model.compile(\n",
        "    optimizer = 'adam',\n",
        "    loss = 'binary_crossentropy',\n",
        "    metrics=['accuracy']\n",
        ")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "t2-_yhQHPpYO"
      },
      "source": [
        "history = model.fit(\n",
        "    X_train, y_train,\n",
        "    validation_split = 0.2,\n",
        "    epochs=200,\n",
        "    batch_size = 50) # verbose=0 화면에 표시 안됨"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KlLL78xrQQGW"
      },
      "source": [
        "print( 'Accuracy: %.4f' % (model.evaluate(X_test,y_test)[1])) "
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZQUSG6rlQS3-"
      },
      "source": [
        "### 훈련과정 시각화"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y95tuvHQQRVZ"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iOPENk6eQoNd"
      },
      "source": [
        "y_acc = history.history['accuracy']\n",
        "y_vloss = history.history['val_loss']\n",
        "x_len = np.arange(len(y_acc))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "bKvN_CjTQgMS"
      },
      "source": [
        "plt.figure(figsize=(12,8))\n",
        "plt.plot(x_len, y_acc, 'bo-',markersize=5, label='accuracy')\n",
        "plt.plot(x_len, y_vloss, 'ro-',markersize=5, label='val_loss')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
